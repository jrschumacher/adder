// Code generated by adder. DO NOT EDIT.

package hello

import (
	"github.com/jrschumacher/adder"
	"github.com/spf13/cobra"
)

// GreetRequestArguments represents the arguments for the greet [name] command
type GreetRequestArguments struct {
	Name string `json:"name" validate:"required"` // Name of the person to greet
}
// GreetRequestFlags represents the flags for the greet [name] command
type GreetRequestFlags struct {
	Capitalize bool `json:"capitalize"` // Capitalize the greeting
	AsciiArt string `json:"asciiArt" validate:"oneof=small big banner"` // ASCII art style for the greeting
	Repeat int `json:"repeat"` // Number of times to repeat the greeting
	Format string `json:"format" validate:"oneof=text json yaml"` // Output format for the greeting
	Quiet bool `json:"quiet"` // Suppress extra output
	Prefix string `json:"prefix"` // Prefix to add before the greeting
	Languages []string `json:"languages"` // Additional languages to greet in
}

// GreetRequest represents the parameters for the greet [name] command
type GreetRequest struct {
	Arguments GreetRequestArguments `json:"arguments"`
	Flags GreetRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// GetRawArguments implements the adder.Request interface
func (r *GreetRequest) GetRawArguments() []string {
	return r.RawArguments
}

// Ensure GreetRequest implements adder.Request interface at compile time
var _ adder.Request = (*GreetRequest)(nil)

// GreetHandler defines the function type for handling greet [name] commands
type GreetHandler func(cmd *cobra.Command, req *GreetRequest) error

// NewGreetCommand creates a new greet [name] command with the provided handler function
func NewGreetCommand(handler GreetHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "greet [name]",
		Short:   "Say hello to someone",
		Args: cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			return runGreet(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().Bool("capitalize", false, "Capitalize the greeting")
	cmd.Flags().StringP("ascii-art", "a", "small", "ASCII art style for the greeting")
	cmd.Flags().IntP("repeat", "r", 1, "Number of times to repeat the greeting")
	cmd.Flags().StringP("format", "f", "text", "Output format for the greeting")
	cmd.Flags().BoolP("quiet", "q", false, "Suppress extra output")
	cmd.Flags().String("prefix", "Hello", "Prefix to add before the greeting")
	cmd.Flags().StringArray("languages", nil, "Additional languages to greet in")

	return cmd
}

// runGreet handles argument and flag extraction
func runGreet(cmd *cobra.Command, args []string, handler GreetHandler) error {
	name := args[0]
	capitalize, _ := cmd.Flags().GetBool("capitalize")
	asciiArt, _ := cmd.Flags().GetString("ascii-art")
	repeat, _ := cmd.Flags().GetInt("repeat")
	format, _ := cmd.Flags().GetString("format")
	quiet, _ := cmd.Flags().GetBool("quiet")
	prefix, _ := cmd.Flags().GetString("prefix")
	languages, _ := cmd.Flags().GetStringArray("languages")
	// Validate enum for ascii-art
	if err := adder.ValidateEnum("ascii-art", asciiArt, []string{"small", "big", "banner"}); err != nil {
		return err
	}
	// Validate enum for format
	if err := adder.ValidateEnum("format", format, []string{"text", "json", "yaml"}); err != nil {
		return err
	}

	// Create request
	req := &GreetRequest{
		Arguments: GreetRequestArguments{
			Name: name,
		},
		Flags: GreetRequestFlags{
			Capitalize: capitalize,
			AsciiArt: asciiArt,
			Repeat: repeat,
			Format: format,
			Quiet: quiet,
			Prefix: prefix,
			Languages: languages,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
