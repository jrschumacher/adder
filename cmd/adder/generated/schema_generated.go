// Code generated by adder. DO NOT EDIT.

package generated

import (
	"github.com/jrschumacher/adder"
	"github.com/spf13/cobra"
)

// SchemaRequestFlags represents the flags for the schema command
type SchemaRequestFlags struct {
	Output string `json:"output"`                            // Output file path for the schema
	Format string `json:"format" validate:"oneof=json yaml"` // Output format
}

// SchemaRequest represents the parameters for the schema command
type SchemaRequest struct {
	Flags        SchemaRequestFlags `json:"flags"`
	RawArguments []string           `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// GetRawArguments implements the adder.Request interface
func (r *SchemaRequest) GetRawArguments() []string {
	return r.RawArguments
}

// Ensure SchemaRequest implements adder.Request interface at compile time
var _ adder.Request = (*SchemaRequest)(nil)

// SchemaHandler defines the function type for handling schema commands
type SchemaHandler func(cmd *cobra.Command, req *SchemaRequest) error

// NewSchemaCommand creates a new schema command with the provided handler function
func NewSchemaCommand(handler SchemaHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:   "schema",
		Short: "Generate JSON Schema for command validation",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runSchema(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("output", "o", "", "Output file path for the schema")
	cmd.Flags().StringP("format", "f", "json", "Output format")

	return cmd
}

// runSchema handles argument and flag extraction
func runSchema(cmd *cobra.Command, args []string, handler SchemaHandler) error {
	output, _ := cmd.Flags().GetString("output")
	format, _ := cmd.Flags().GetString("format")
	// Validate enum for format
	if err := adder.ValidateEnum("format", format, []string{"json", "yaml"}); err != nil {
		return err
	}

	// Create request
	req := &SchemaRequest{
		Flags: SchemaRequestFlags{
			Output: output,
			Format: format,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
