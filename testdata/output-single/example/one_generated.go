// Code generated by adder. DO NOT EDIT.

package example

import (
	
	"github.com/spf13/cobra"
)

// OneRequestArguments represents the arguments for the one command
type OneRequestArguments struct {
	Target string `json:"target" validate:"required"` // Target to process
}
// OneRequestFlags represents the flags for the one command
type OneRequestFlags struct {
	Force bool `json:"force"` // Force the operation
}

// OneRequest represents the parameters for the one command
type OneRequest struct {
	Arguments OneRequestArguments `json:"arguments"`
	Flags OneRequestFlags `json:"flags"`
}

// OneHandler defines the function type for handling one commands
type OneHandler func(cmd *cobra.Command, req *OneRequest) error

// NewOneCommand creates a new one command with the provided handler function
func NewOneCommand(handler OneHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "one [target]",
		Short:   "Example One",
		Args: cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			return runOne(cmd, args, handler)
		},
	}

	// Register flags
	cmd.Flags().BoolP("force", "f", false, "Force the operation")

	return cmd
}

// runOne handles argument and flag extraction
func runOne(cmd *cobra.Command, args []string, handler OneHandler) error {
	target := args[0]
	force, _ := cmd.Flags().GetBool("force")

	// Create request
	req := &OneRequest{
		Arguments: OneRequestArguments{
			Target: target,
		},
		Flags: OneRequestFlags{
			Force: force,
		},
	}

	// Call handler
	return handler(cmd, req)
}
