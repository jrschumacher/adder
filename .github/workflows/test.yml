name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: go test -v -race -cover ./...

    - name: Run integration tests
      run: go test -v -race ./cmd/

    - name: Run example tests
      run: |
        cd example
        go test -v -race .

    - name: Run golden file tests
      run: go test -v -run TestGenerator_GoldenFiles

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  test-docs:
    name: Test Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Build adder CLI
      run: go build -o adder ./cmd

    - name: Test adder with example docs
      run: |
        ./adder generate --input example/docs/man --output test-output --package testpkg
        
    - name: Verify generated files compile
      run: |
        echo "package main" > test-output/main.go
        echo "import _ \"./testpkg\"" >> test-output/main.go
        echo "func main() {}" >> test-output/main.go
        cd test-output && go mod init test && go mod tidy && go build

    - name: Test self-dogfooding
      run: |
        ./adder generate --input docs/commands --output self-test --package selftest
        # Verify the self-generated code compiles
        cd self-test && go mod init selftest && go mod tidy && go build || true