name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_run:
    workflows: ["Release Please"]
    types:
      - completed

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.workflow_run.conclusion == 'success'
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        BINARY_NAME="adder"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="adder.exe"
        fi
        
        LDFLAGS="-s -w -X main.version=$VERSION -X main.commit=$GITHUB_SHA -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        go build -ldflags "$LDFLAGS" -o "dist/${BINARY_NAME}" ./cmd
        
        # Create archive
        ARCHIVE_NAME="adder-$VERSION-$GOOS-$GOARCH"
        if [ "$GOOS" = "windows" ]; then
          ARCHIVE_NAME="$ARCHIVE_NAME.zip"
          cd dist && zip "$ARCHIVE_NAME" "$BINARY_NAME" && cd ..
        else
          ARCHIVE_NAME="$ARCHIVE_NAME.tar.gz"
          cd dist && tar -czf "$ARCHIVE_NAME" "$BINARY_NAME" && cd ..
        fi
        
        echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
        echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: adder-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/*
        retention-days: 90

    - name: Generate checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Upload checksums
      uses: actions/upload-artifact@v4
      with:
        name: checksums-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/checksums.txt

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.workflow_run.conclusion == 'success'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-assets/
        find artifacts -name "checksums.txt" | head -1 | xargs -I {} cp {} release-assets/
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}